
--- Idea 1: First class statements---


---Concepts---

Sql#use {
    create(table).char([<name>, (width), (notNull), (isPrimary)])
    insert(table).values()
    delete(table). // Supports deleting values and tables
    select(table)
    switch("OtherTable") // Switches table context
}


---Examples---

"CREATE TABLE IF NOT EXISTS UUIDForName (uuid CHAR(36) PRIMARY KEY NOT NULL, name VARCHAR(255) NOT NULL)";
"INSERT INTO UUIDForName (uuid, name) VALUES (?, ?) ON DUPLICATE KEY UPDATE name=name";
"SELECT * FROM UUIDForName WHERE name=?";

To

Sql#use("UUIDForName") {
    create().char("uuid", 36, false, true).varChar("name")
    insert().values(player#uuid, player#name).onDupeUpdate("name", EQUALS, "name")
    select().all().where("name", EQUALS, player#name).forEach()
}


--- Idea 2: Collections (Deprecated)---


---Examples---
"CREATE TABLE IF NOT EXISTS UUIDForName (uuid CHAR(36) PRIMARY KEY NOT NULL, name VARCHAR(255) NOT NULL)";
"INSERT INTO UUIDForName (uuid, name) VALUES (?, ?) ON DUPLICATE KEY UPDATE name=name";
"SELECT * FROM UUIDForName WHERE name=?";

To

// Creates a table automagically, maybe make an ORM for this?
table = Table.Builder(name).char("uuid", 36, false, true).varChar("name").create(sql)

// Maybe queue these actions and run on another thread
table.putValues(player#uuid, player#name)


---Idea 3: Collections---


---Examples---
"CREATE TABLE IF NOT EXISTS UUIDForName (uuid CHAR(36) PRIMARY KEY NOT NULL, name VARCHAR(255) NOT NULL)";
"INSERT INTO UUIDForName (uuid, name) VALUES (?, ?) ON DUPLICATE KEY UPDATE name=name";
"SELECT * FROM UUIDForName WHERE name=?";

To

sql.connect()
// Table
table = sql.table(User.class, (name/foreignKeys), (foreignKeys))

// Maybe queue these actions and run on another thread
// table.add(new User("ID", "Meow")) (Deprecated, just use [put])

table.put(new User("ID", "Meowth")) // Should check for a primary key and utilize on dupe update if so

table.rem(user) // Maybe add a callback

// Selects all by default if no filter is specified
table.forEach { resultSet ->

}

table.filter("name", DISTINCT) : Table

table.filter("name", EQUALS, player#name).forEach({

})

table.min : Value
table.max : Value

table.groupBy("name") : <Name/Key, List<Value>>

